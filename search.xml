<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>下拉框获取后台数据</title>
      <link href="/2020/05/12/%E4%B8%8B%E6%8B%89%E6%A1%86%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/05/12/%E4%B8%8B%E6%8B%89%E6%A1%86%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>ajax，处理数据</p><pre><code class="javascript">$.ajax({    url: '/getRegion',    dataType: 'json',    // data:{'state': 0},  //查询状态为正常的所有机构类型    type: 'get',    contentType: "application/x-www-form-urlencoded; charset=utf-8",    success: function (data) {        $.each(data, function (index, item) {            $('#n_regionkey').append(new Option(item.r_name, item.r_regionkey));// 下拉菜单里添加元素        });        layui.form.render("select");    }</code></pre><p>页面，选择框</p><pre><code><div class="layui-input-block">    <input type="text" lay-verify="required" name="n_regionkey" class="layui-input" placeholder="请输入地区编号">        <select name="n_regionkey" id="n_regionkey" lay-filter="n_regionkey">            <option value></option>        </select></div></code></pre><p>后台，得到地区列表</p><pre><code class="java">@RequestMapping("/getRegion")@ResponseBodypublic List<region> getRegion(){   return regionService.getAll();}</region></code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> java </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二月底的雨夜</title>
      <link href="/2020/02/28/%E4%BA%8C%E6%9C%88%E5%BA%95%E7%9A%84%E9%9B%A8%E5%A4%9C/"/>
      <url>/2020/02/28/%E4%BA%8C%E6%9C%88%E5%BA%95%E7%9A%84%E9%9B%A8%E5%A4%9C/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>切记一点，你是<strong>按需学习</strong>，而不是一个收破烂的，收藏一堆链接，收藏了你就会了，其实收集得越多，你会越浮躁！</p><p>这句话有点提醒我😑</p><hr><p>晕，我最近都在干嘛啊</p><p>好久都不在状态了。前段时间胃痛、嗓子疼、浑身冒冷汗，可把我吓得不轻。在这个特殊时期，任何身体上的不舒服都会让人肺炎病毒上想，身心受到极大折磨。也的确，我的症状实在太像了，去医院检查之后，医生说应该只是吃坏了肚子，加上夜里着凉。而回想起来，还有一个原因可能是有一天起来，嗓子干痒，喝了一大口凉水，让我的胃受不了。正值季节交替，温度飘忽不定，易感风寒，一定是要注意身体。</p><hr><p>最近在考虑那个移动互联网的课程到底要不要退，我不想再</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring笔记</title>
      <link href="/2020/02/16/Spring%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/02/16/Spring%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>Spring是一个轻量级的控制反转(IoC或者是DI依赖注入)和面向切面(AOP)的容器框架。</p><p><a href="http://lc-UQ294L34.cn-n1.lcfile.com/f2e29b139e61b301c703/clipboard.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://lc-UQ294L34.cn-n1.lcfile.com/f2e29b139e61b301c703/clipboard.png" class="lazyload"></a></p><p>如图为一个基于SSH,B/S结构的单体Java应用的搭建过程，首先通过浏览器进入到Filter拦截器，进入到Structs2，通过Service层进入到Hibernate，从而进行数据库，经过而这整个过程都是由SpringIOC容器控制。</p><p>引入Spring框架并不会对原来的应用产生影响，也可以理解为基于Spring开发的应用中对象可以不依赖与Spring的API。</p><p>Struts2、hibernate、mybatis等框架都是可以被装入Spring的容器中。这个容器包含并且管理应用对象的生命周期。</p><p>Spring 实现了简单的组件的配合组成一个复杂的应用，在Spring中可以使用XML和Java注解组合这些对象。</p><pre><code>    package com.nihui.spring.bean;​    import org.springframework.context.ApplicationContext;​    import org.springframework.context.support.ClassPathXmlApplicationContext;​    public class Main {​        public static void main(String[] args) {​            //使用Spring框架之后这些操作都可以交给Spring来完成​            //1.创建Spring的IOC容器​            ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");​            //2.从IOC容器中获取到Bean的示例​            World helloWorld = (World) context.getBean("World");​            //3.进行方法的调用​    helloWorld.hello();​        }}</code></pre><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><a href="http://lc-UQ294L34.cn-n1.lcfile.com/b0e6f110efcd1d550f08/aop.png" data-fancybox="group" data-caption="aop" class="fancybox"><img alt="aop" title="aop" data-src="http://lc-UQ294L34.cn-n1.lcfile.com/b0e6f110efcd1d550f08/aop.png" class="lazyload"></a></p><p>解决比如日志，事务，权限等待，缓存等问题</p><p>在不改变原有的逻辑的基础上，增加一些额外的功能。代理也是这个功能，读写分离也能用aop来做。AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>1，Configuration接口：配置Hibernate，根据其启动Hibernate，创建SessionFactory对象；</p><p>2，SessionFactory接口：初始化Hibernate，充当数据存储源的***，创建session对象，SessionFactory是</p><p>线程安全的，意味着它的同一个实例可以被应用的多个线程共享，是重量级二级缓存；</p><p>3，session接口：负责保存、更新、删除、加载和查询对象，是一个非线程安全的，避免多个线程共享一个session，是轻量级，一级缓存。</p><p>4，Transaction接口：管理事务。可以对事务进行提交和回滚；</p><p>5，Query和Criteria接口：执行数据库的查询。</p><h2 id="EqualsAndHashCode-callSuper-false"><a href="#EqualsAndHashCode-callSuper-false" class="headerlink" title="@EqualsAndHashCode(callSuper = false)"></a>@EqualsAndHashCode(callSuper = false)</h2><p><strong>这个注解的作用就是自动的给model bean实现equals方法和hashcode方法。</strong></p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>RESTful Web服务控制器只返回对象，对象数据作为JSON / XML直接写入HTTP响应。</p><p>以下步骤描述了典型的Spring MVC REST工作流：</p><ol><li>客户端以URI形式向Web服务<strong>发送请求</strong>。</li><li>该请求被DispatcherServlet<strong>拦截</strong>，该服务器<strong>查找</strong>Handler Mappings及其类型。</li></ol><ul><li><ul><li>应用程序<strong>上下文</strong>文件中定义的Handler Mappings部分告诉DispatcherServlet<strong>使用哪种策略</strong>根据传入请求查找控制器。</li><li>Spring MVC支持三种不同类型的映射请求URI到控制器：注释，名称约定和显式映射。</li></ul><p>3.请求由<strong>Controller处理</strong>，响应返<strong>回到DispatcherServlet</strong>，然后DispatcherServlet将调度到视图。 使用@Controller时需要用@ResponseBody注释。</p></li></ul><p><strong>而Spring 4.0引入了@RestController，这是一个控制器的专用版本，它是一个方便的注释，可用自动添加@Controller和@ResponseBody注释。</strong></p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>@Autowired 注释，它可以<strong>对类成员变量、方法及构造函数进行标注</strong>，<strong>完成自动装配</strong>的工作。 通过 @Autowired的使<strong>用来消除 set ，get方法</strong>。也可以说是依赖注入，关联自己的服务或依赖的其他服务。</p><p><strong>注意事项：</strong>在使用@Autowired时，首先在容器中查询对应类型的bean</p><ol><li>　　　　如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据</li><li>　　　　如果查询的结果不止一个，那么@Autowired会根据名称来查找。</li><li>　　　　如果查询的结果为空，那么会抛出异常。解决方法时，使用required=false</li></ol><h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><p><strong>什么是serialVersionUID</strong></p><p><strong>序列化是将对象的状态信息转换为可存储或传输的形式的过程。我们都知道，Java对象是保存在JVM的堆内存中的，也就是说，如果JVM堆不存在了，那么对象也就跟着消失了。</strong></p><p>而序列化提供了一种方案，可以让你在即使JVM停机的情况下也能把对象保存下来的方案。就像我们平时用的U盘一样。把Java对象序列化成可存储或传输的形式（如二进制流），比如保存在文件中。这样，当再次需要这个对象的时候，从文件中读取出二进制流，再从二进制流中反序列化出对象。</p><p><strong>虚拟机是否允许反序列化，不仅取决于类路径和功能代码是否一致，一个非常重要的一点是两个类的序列化 ID 是否一致</strong>，这个所谓的序列化ID，就是我们在代码中定义的serialVersionUID。</p><h2 id="java-Serializable"><a href="#java-Serializable" class="headerlink" title="java  Serializable"></a>java  Serializable</h2><p><strong>1、序列化是干什么的？</strong></p><p>​    简单说就是为了<strong>保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。</strong>虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。</p><p><strong>具体的序列化过程是这样的</strong>：序列化操作的时候系统会把当前类的serialVersionUID写入到序列化文件中，当反序列化时系统会去检测文件中的serialVersionUID，判断它是否与当前类的serialVersionUID一致，如果一致就说明序列化类的版本与当前类版本是一样的，可以反序列化成功，否则失败。</p><p><strong>2、什么情况下需要序列化</strong>  </p><p>  a）当你想把的<strong>内存中的对象状态保存到一个文件中或者数据库</strong>中时候；//缓存？</p><p>  b）当你想用<strong>套接字</strong>在网络上传送对象的时候；</p><p>  c）当你想通过<strong>RMI</strong>传输对象的时候；</p><p><strong>3、当对一个对象实现序列化时，究竟发生了什么？</strong></p><p>  在没有序列化前，每个保存在堆（Heap）中的对象都有相应的状态（state），即实例变量（instance ariable）比如：</p><p>java 代码</p><ol><li>Foo myFoo = new Foo(); </li><li>myFoo .setWidth(37); </li><li>myFoo.setHeight(70); </li></ol><p>​    当 通过下面的代码序列化之后，MyFoo对象中的width和Height实例变量的值（37，70）都被保存到foo.ser文件中，这样以后又可以把它 从文件中读出来，重新在堆中创建原来的对象。当然保存时候不仅仅是保存对象的实例变量的值，JVM还要保存一些小量信息，比如类的类型等以便恢复原来的对 象。</p><p>java 代码</p><pre><code>FileOutputStream fs = new FileOutputStream("foo.ser"); ObjectOutputStream os = new ObjectOutputStream(fs); os.writeObject(myFoo); </code></pre><p><strong>4、实现序列化（保存到一个文件）的步骤</strong></p><p>​    a）Make a FileOutputStream       </p><p><strong>java 代码</strong></p><ol><li><strong>FileOutputStream fs = new FileOutputStream(“foo.ser”);</strong>  </li></ol><p>​    b）Make a ObjectOutputStream       </p><p>java 代码</p><ol><li>ObjectOutputStream os = new ObjectOutputStream(fs);  </li></ol><p>​    c）write the object</p><p>java 代码</p><ol><li><p>os.writeObject(myObject1); </p></li><li><p>os.writeObject(myObject2); </p></li><li><p>os.writeObject(myObject3); </p><p>d) close the ObjectOutputStream</p></li></ol><p>java 代码</p><ol><li>os.close(); </li></ol><p><strong>5、举例说明</strong></p><p><strong>java 代码</strong></p><pre><code>import java.io.\*;public class Box implements Serializable {   private int width;   private int height;   public void setWidth(int width){ ​    this.width = width;   }   public void setHeight(int height){ ​    this.height = height;   }   public static void main(String[] args){ ​    Box myBox = new Box(); ​    myBox.setWidth(50); ​    myBox.setHeight(30); ​    try{ ​      FileOutputStream fs = new FileOutputStream("foo.ser"); ​      ObjectOutputStream os = new ObjectOutputStream(fs); ​      os.writeObject(myBox); ​      os.close(); ​    }catch(Exception ex){ ​      ex.printStackTrace(); ​    }   } } </code></pre><p>6、相关注意事项</p><p>  a）序列化时，只对对象的状态进行保存，而不管对象的方法；</p><p>  b）当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口；</p><p>  c）当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化；</p><p>  d）并非所有的对象都可以序列化，,至于为什么不可以，有很多原因了,比如：</p><p>​    1.安全方面的原因，比如一个对象拥有private，public等field，对于一个要传输的对象，比如写到文件，或者进行rmi传输 等等，在序列化进行传输的过程中，这个对象的private等域是不受保护的。</p><p>​    \2. 资源分配方面的原因，比如socket，thread类，如果可以序列化，进行传输或者保存，也无法对他们进行重新的资源分 配，而且，也是没有必要这样实现。</p><p>  从上述定义可以发现,序列化就是为了保存java的类对象的状态的.保存这个状态的作用主要用于不同jvm之间进行类实例间的共享.在ORMaping中的缓存机制,进行缓存同步时,便是常见的java序列化的应用之一.在进行远程方法调用,远程过程调用时,采用序列化对象的传输也是一种应用…当你想从一个jvm中调用另一个jvm的对象时,你就可以考虑使用序列化了.</p><p><strong>简而言之:序列化的作用就是为了不同jvm之间共享实例对象的一种解决方案.由java提供此机制,效率之高,是其他解决方案无法比拟的。</strong></p><h2 id="set-get"><a href="#set-get" class="headerlink" title="set get"></a>set get</h2><p>set是设置的意思，而get是获取的意思，这两个方法是对数据进行设置和获取用的。而且，在类中使用set和get方法时，都是在set和get后面跟上一些特定的词来形成特定意思的方法名，比如setage（）和getage（），表示设置年龄和获取年龄。</p><p>它们是针对JAVA面向对象编程中的封闭性和安全性的。封闭性即对类中的域变量进行封闭操作，即用private来修饰他们，如此一来其他类则不能对该变量访问。这样我们就将这些变量封闭在了类内部，这样就提高了数据的安全性，<strong>当我们想要操作这些域变量怎么办呢？</strong>我们可以通过两种方法，<strong>第一</strong>中即通过public方式的构造器（或称构造函数），对象一实例化就对该变量赋值。<strong>第二</strong>种就是通过上面提到的set和get方法，这里我举一个特定的例子，我定义一个Person类，该类中有name、age这两个私有域变量，然后我定义setname（）、getname（）、setage（）、getage（）这四个方法，通过这四个方法来实现对name和age的操作。这样一来，我不用直接对Person类中的域变量操作，而是通过set和get方法间接地操作这些变量，这样就能提高域变量的安全性，同时又保证了域变量的封装型。</p><p>最后说说set和get方法的使用场景，<em>一般来说set和get方法都是对私有域变量进行操作的</em>，所以大多数都是使用在包含特定属性的类实体中。</p><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>lombok可用简单的注解形式来简化java代码，提高开发人员的开发效率。增强能力，省略重复工作。如set、get方法的声明等。</p><p><strong>用法</strong>：</p><p><strong>@Data</strong>注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><p><strong>@Getter/@Setter，只针对get|set的话</strong></p><p><strong>@NonNull</strong>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p><strong>@Cleanup</strong>该注解能帮助我们自动调用close()方法，很大的简化了代码。文件的开闭？</p><p><strong>@EqualsAndHashCode</strong>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。没用过…</p><p><strong>@ToString</strong>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将includeFieldNames参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p><strong>@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</strong>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><h2 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h2><p><strong>Hibernate</strong>是一个<a href="https://baike.baidu.com/item/开放源代码/114160" target="_blank" rel="noopener">开放源代码</a>的<strong>对象关系映射框架</strong>，它对JDBC进行了非常轻量级的对象封装<strong>，它将</strong>POJO与数据库表建立<strong><strong>映射</strong></strong>关系<strong>，是一个全自动的orm框架，hibernate</strong>可以自动生成SQL语句，自动执行**，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任。。</p><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="1-MyBatis"><a href="#1-MyBatis" class="headerlink" title="1.MyBatis"></a>1.MyBatis</h3><p>是一款优秀的持久层框架，它支持<strong>定制化</strong> <strong>SQL、存储过程以及高级映射</strong>。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。  <strong>手**</strong>动写xml文件映射sql语句。**</p><h3 id="2-Mybatis-plus"><a href="#2-Mybatis-plus" class="headerlink" title="2.Mybatis plus"></a><a href="https://mp.baomidou.com/" target="_blank" rel="noopener"><strong>2.Mybatis plus</strong></a></h3><p><strong>可以不用手写sql语句，直接注解、继承base类来映射。</strong></p><dependency>    <groupid>com.baomidou</groupid>    <artifactid>mybatis-plus</artifactid>    <version>3.3.1.tmp</version></dependency><h4 id="queryWrapper"><a href="#queryWrapper" class="headerlink" title="queryWrapper"></a>queryWrapper</h4><p><a href="http://lc-UQ294L34.cn-n1.lcfile.com/885c384eefa210aa6c78/201810.png" data-fancybox="group" data-caption="wrapper" class="fancybox"><img alt="wrapper" title="wrapper" data-src="http://lc-UQ294L34.cn-n1.lcfile.com/885c384eefa210aa6c78/201810.png" class="lazyload"></a></p><p><strong>wapper介绍</strong> ：</p><ol><li>​    Wrapper ： 条件构造抽象类，最顶端父类，抽象类中提供4个方法西面贴源码展示</li><li>​    AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</li><li>​    AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</li><li>​    LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</li><li>​    LambdaUpdateWrapper ： Lambda 更新封装Wrapper</li><li>​    <strong>QueryWrapper</strong> ： Entity 对象封装操作类，不是用lambda语法</li><li>​    UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</li></ol><p><strong>QueryWrapper</strong> 继承自 AbstractWrapper ,自身的内部属性 entity 也用于生成 where 条件</p><p>及 LambdaQueryWrapper, 可以通过 new QueryWrapper().lambda() 方法获取。</p><h4 id="IService"><a href="#IService" class="headerlink" title="IService"></a>IService</h4><p>可借此继承公共接口IService的基本的增删改查</p><pre><code>import com.baomidou.mybatisplus.extension.service.IService;</code></pre><h4 id="BaseMapper"><a href="#BaseMapper" class="headerlink" title="BaseMapper"></a>BaseMapper</h4><pre><code>import com.baomidou.mybatisplus.core.mapper.BaseMapper;</code></pre><h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p>Thymeleaf是用来开发Web和独立环境项目的服务器端的Java模版引擎,<strong>作用</strong>就是把各个用户的公用的东西（页面）做一个提取，然后再根据不同的数据对页面进行渲染</p><p><strong>特点</strong></p><ul><li><strong>动静结合</strong>：Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。</li><li><strong>开箱即用</strong>：它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</li><li><strong>多方言支持</strong>：Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</li><li><strong>与SpringBoot完美整合</strong>，SpringBoot提供了Thymeleaf的默认配置，并且为Thymeleaf设置了视图解析器，我们可以像以前操作jsp一样来操作Thymeleaf。代码几乎没有任何区别，就是在模板语法上有区别。</li></ul><h2 id="java-Lambda表达式"><a href="#java-Lambda表达式" class="headerlink" title="java Lambda表达式"></a>java Lambda表达式</h2><p>Lambda 表达式，也可称为闭包，允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><p>lambda 表达式的语法格式如下：</p><p>(parameters) -> expression  或 (parameters) ->{ statements; }</p><p>重要特征:</p><ul><li><strong>可选类型声明：</strong>不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号：</strong>一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号：</strong>如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字：</strong>如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。</li></ul><h2 id="shrio"><a href="#shrio" class="headerlink" title="shrio"></a>shrio</h2><p>Apache Shiro是一个强大且易用的<strong>Java安全框架</strong>,执行身份验证、授权、密码和会话管理.</p><p>三个核心组件：Subject, SecurityManager 和 Realms.</p><ol><li><p><strong>Subject：即“当前操作用户”。</strong>但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。</p><p>Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</p></li><li><p><strong>SecurityManager</strong>：它是Shiro框架的核心，<strong>典型的Facade模式，Shiro</strong>通过SecurityManager来管理内部组件实例**，并通过它来提供安全管理的各种服务。</p></li><li><p><strong>Realm</strong>： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，<strong>Shiro会从应用配置的Realm中查找用户及其权限信息</strong>。</p><p>从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。</p></li></ol><p>　　Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</p><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p>Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：<strong>面向接口的远程方法调用</strong>，<strong>智能容错和负载均衡</strong>，以及<strong>服务自动注册和发现</strong>。</p><p>主要核心部件</p><p><strong>Remoting:</strong> 网络通信框架，实现了 sync-over-async 和request-response 消息机制.</p><p><strong>RPC:</strong> 一个远程过程调用的抽象，支持<a href="https://baike.baidu.com/item/负载均衡" target="_blank" rel="noopener">负载均衡</a>、<a href="https://baike.baidu.com/item/容灾" target="_blank" rel="noopener">容灾</a>和<a href="https://baike.baidu.com/item/集群" target="_blank" rel="noopener">集群</a>功能</p><p><strong>Registry:</strong> 服务目录框架用于服务的注册和服务事件发布和订阅</p><h2 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h2><p>2020/02/05 16:38 </p><p><strong><a href="https://www.jianshu.com/p/7893169a7c93" target="_blank" rel="noopener">representational state transfer</a></strong>表象性状态转变)</p><p><strong>RESTFUL特点</strong>包括：</p><p>1、每一个URI代表1种资源；</p><p>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</p><p>3、通过操作资源的表现形式来操作资源；</p><p>4、资源的表现形式是XML或者HTML；</p><p>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</p><p><strong>RESTful架构</strong>是对MVC架构改进后所形成的一种架构，通过使用事先定义好的接口与不同的服务联系起来。在RESTful架构中，浏览器使用POST，DELETE，PUT和GET四种请求方式分别对指定的URL资源进行增删改查操作。因此，RESTful是通过URI实现对资源的管理及访问，具有扩展性强、结构清晰的特点。</p><p>RESTful架构将服务器分成前端服务器和后端服务器两部分，前端服务器为用户提供无模型的视图；后端服务器为前端服务器提供接口。浏览器向前端服务器请求视图，通过视图中包含的AJAX函数发起接口请求获取模型。</p><p>项目开发引入RESTful架构，利于团队并行开发。在RESTful架构中，将多数HTTP请求转移到前端服务器上，降低服务器的负荷，使视图获取后端模型失败也能呈现。但RESTful架构却不适用于所有的项目，当项目比较小时无需使用RESTful架构，项目变得更加复杂。</p><h2 id="Hibernate-Validation"><a href="#Hibernate-Validation" class="headerlink" title="Hibernate Validation"></a>Hibernate Validation</h2><p><strong>1</strong>.Hibernate Validation是一个后端验证框架,目前比较流行的验证做法：前端jquery-form-validate + 后端hibernate-validate，它是JSR 303-Bean Validation规范的实现方案，与Hibernate ORM 没有任何关系。</p><p><strong>2.hibernate Validation constraint 注解</strong></p><p><strong>2.1、Bean Validation 中内置的 constraint(约束)</strong></p><p>@Null 被注释的元素必须为 null</p><p>@NotNull 被注释的元素必须不为 null</p><p>@AssertTrue 被注释的元素必须为 true</p><p>@AssertFalse 被注释的元素必须为 false</p><p>@Min(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@DecimalMin(value) 被注释的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@DecimalMax(value) 被注释的元素必须是一个数字，其值必须小于等于指定的最大值</p><p>@Size(max=, min=) 被注释的元素的大小必须在指定的范围内</p><p>@Digits (integer, fraction) 被注释的元素必须是一个数字，其值必须在可接受的范围内</p><p>@Past 被注释的元素必须是一个过去的日期</p><p>@Future 被注释的元素必须是一个将来的日期</p><p>@Pattern(regex=,flag=) 被注释的元素必须符合指定的正则表达式</p><p><strong>2.2、Hibernate Validator 附加的constraint</strong></p><p>@NotBlank(message =) 验证字符串非null，且长度必须大于0</p><p>@Email 被注释的元素必须是电子邮箱地址</p><p>@Length(min=,max=) 被注释的字符串的大小必须在指定的范围内</p><p>@NotEmpty 被注释的字符串的必须非空</p><p>@Range(min=,max=,message=) 被注释的元素必须在合适的范围内</p><p>主要区分下@NotNull @NotEmpty @NotBlank 3个注解的区别：</p><p>@NotNull 任何对象的value不能为null</p><p>@NotEmpty 集合对象的元素不为0，即集合不为空，也可以用于字符串不为null</p><p>@NotBlank 只能用于字符串不为null，并且字符串trim()以后length要大于0</p><h2 id="ToStringBuilder"><a href="#ToStringBuilder" class="headerlink" title="ToStringBuilder"></a>ToStringBuilder</h2><p><strong><a href>ToStringBuilder</a>简单介绍</strong></p><p>ToStringBuilder是用于构建一个类的toString字符串的工具类，提供了多种不同的格式，同时还能自定义打印哪些变量。</p><p><strong>ToStringBuilder主要方法</strong></p><ul><li>append()方法： 该方法用于自定义添加需要打印哪些变量，只有使用append添加的变量才会在toString函数中打印。</li><li>reflectionToString()方法： 该方法使用反射机制打印一个类中的所有变量，该函数还提供一个变量style，用于指定使用什么样的格式打印变量</li></ul><h2 id="throwable和exception的区别"><a href="#throwable和exception的区别" class="headerlink" title="throwable和exception的区别"></a>throwable和exception的区别</h2><p>1、throwable是父类，exception是子类。</p><p>2、throwable是根基，exception是从throwable派生出来的。</p><p>3、throwable中包括exception（异常）和error（错误）。</p><p>4、throwable用来定义所有可以作为异常被抛出来的类，exception专指程序本身可以处理的异常，一般性的异常</p><h2 id="MySQL-自增长主键"><a href="#MySQL-自增长主键" class="headerlink" title="MySQL 自增长主键"></a>MySQL 自增长主键</h2><p>比如有主键为1,2,3的三条数据，删除2,3两条数据后再新增数据，主键是从4开始的。</p><p>解决方法：</p><p>1，删除原有主键：</p><pre><code>ALTER TABLE `table_name` DROP `id`;</code></pre><p>2，添加新主键字段：</p><pre><code>ALTER TABLE `table_name` ADD `id` int NOT NULL FIRST;</code></pre><p>3，设置新主键：</p><pre><code>ALTER TABLE `table_name` MODIFY COLUMN `id` int NOT NULL AUTO_INCREMENT,ADD PRIMARY KEY(id);</code></pre></body></html>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的学习</title>
      <link href="/2020/01/27/%E6%9C%80%E8%BF%91%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/01/27/%E6%9C%80%E8%BF%91%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>哇，我真的不知道怎么学php了，我本来是认为，学这些语言都是要先去找些实战项目练习练习。但是在GitHub上整了些商城项目，crm项目什么的都不知从何下手，对项目结构的了解都要一段时间。这个过程先去大致学一下php语法，然后听说thinkphp框架应用很广，就去看了一下，之后找了一个php curd项目对数据操作一下。然后，然后又进了Vue的坑。。</p><h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><p>早闻vue的大名，这次在php尝试中，发现好多php项目都结合了vue做前端，又不得不去深入看一下。本来是连vue做什么的都不知道，还以为它是和layui怎样的展示ui界面的框架，实际上它现在是真的是最<a href="https://www.zhihu.com/question/320606603" target="_blank" rel="noopener">火热</a>的一种前端js框架，反正很厉害。于是就对vue-cli、webpack了解一番，感觉它比较轻量，安装依赖就可以用了。</p><h2 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h2><p>element这才是个ui框架，感觉挺好看的，和vue结合挺多的。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过年</title>
      <link href="/2020/01/27/%E8%BF%87%E5%B9%B4/"/>
      <url>/2020/01/27/%E8%BF%87%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="87585c54985390cfcbbe571040c0235acb44cd37acfb5821953177e03c9ee776">0e06ff9836219e64a1f9723595326bf4afe1a08e11f6e7856e062208fd17491dfe6d3851597a84433f0d54d287d7c47c95677a389e692e33fbceef263c4aee167e816932c98a48c830d61d9abe4471efc975b5024ebb6ed65bde366f5552eb9c6f0947553df471b4ebc8a20fc45038d2528036746bb38949443b9e14731205d0bd10a01d18067a95411f698ff8e5cf950f07d6c0c5c3f38b2c60364ad8911b6575f83a99dd1626669a071ee7fc04f686b9cbf91ff46663c1a1b9bd0155474f85af42b9d3ffbc513a6e1dec5be6f6ed1ae0382df2f3a0dba981a7e5a88dfbf90ee61ec5494087c70e72061d5c738ad1cbe2aa6442f8ec2622c06ec41c1eafb6d594a28a5a42926d5702b7caf02c9a8c688f14a0b02f040b104f5aed22886669867fdba4e95c853f8aec5db6c8c2631d8886ae78ba372e79478f75c0b924529eea39e3b9eda538f95c6abcad87de119a7b8eceea7a99de0c03c7ff43c7b9c132952c8ef5a0e2352d92d233426b244049e0d8923ad38b44dd871d927337d0af7ba21052372263c2eb732dd7cb0651adadaff9ce8fe07434bdff45f5aad29740cddf9999c8eb1a00f64351112335171b967b4b8cc7a07b8b0d5c179abcb2cd848eaba506d4ae4c4b7f447486580da2e5a9e901359af40e610ab8861dbeafda0b18937c39cdb20274d64a039fb1ab8bebc7a57bca032a80f23ee1cdafd02547169a334ee65b6321dc396b342cffa67d5c81f4c7181d9eac10ae65f06b064984b3e315f836e0b59d524c54cbdd116bf7a7ae1c08ea44b62a9ffd04d166be7f7e64cf859cf28b8c9bdf17d62578d62a78870041ae872dccacaa92da767cfaedd2e1e94b0980eaa6079c6cefe711cbb76fb8ca7932dd9de79d75427c9d79b6fe28e6e03ca3304d310ff0ee291aaf773c8c09296b7483d4b6f7ce3d759020b11da2927095d83e81ce1ec252bf77f18ea84a5df3bda30ff002d47f92ffc7795dcecc694297c17a81dc0d928a036be3b5423897797255cf73f4d9cd4499354f5c8cb050b3040d50adc12d94e3527d20573c29283a031cce424866b415125110d8eb4cd7c14a059b5f5edcba929ebb202ecab0eacc3ba0d8f93b3fc08ff602a56037c03278d10b1ce26acf98409fdf17201dabf9bcdca4e4c94e9b20dfc91945a3e042cce3f812094c9bc3dd4a614a3ff9fd83eff3723b4e8e3f43dee2f62cd039536faf76dabb79e182e5b49e302d44d6977f32c3f6a3455fbed96ca9d03271fc2e26e91acb8c84ea4a5c8488c7183207fd5ebc41dd579675e370762e8fa8f9cdc596d811d1df3f6b383975adcf1fa67594b3e75e93e57ae76f6b71c116b4b80afd7accc0af02c960221b59fd92e5c3f5ca4dd0c7fcf30ec187581384b28395cbc49f50b1f99a94aea234e24907ff115ffccc203e2a74dba548950a648c0f519f843a9f19938cc06eb4bc1be2391f05bd17e6a914a42e0a2952eec917af9e8f876f63ba8f40594784c3ff068778be47ed1eb0dcddb32c164971ee27c3567de05b3e2adde48f64797dc99f532eb300ecd4d9a1f124e602994e8de72e2c6e900f13b2846782035199e714a020fec02677cba1b4b67f3cf99a889e03b9d309d2c84fc04e5b2c3b3e714a359bd5f0555ab39fd63c0c04e16dabc6bef940c1824e1da7f160c354df3c6b9b08cf8c5417c9a0b718dfae3e273ef44c1e9bbc48e3241a4a804a7d9d83f2a9c59690f8edfc74df37f5cbd2b9ad1e1a54f2378480ce26f97dd5ac15ebf5ba20eca397d8946dc95c0a1b39432725be16b31a131eff0088e5fea4036b59aa907344664f33ed2ea09e4a77cb562340d0dfdab938948a6be4998c809a8b44809b67eddca12e00845a59f62037e8c432f57a3a43e6eee55cdcf48918dc6e2af2c30afa7fe0acc225c65560ba23380a86fda9d1401a872988cffbc80a2e51c18fd0a00f6809e95f9794e3ae98607adf4ab3f8be353126dd094c35b8bbd6fb4b261b4b6d8f68fd216c78695db8b4ebe2eec1943f8546673282d63122f191975b86340acc334252bfa8c4fa067a77eb1a79c43fef6f35277a9334bc88200142397e2304a420fe86c4f326192869c865ae630c306d4bbd3658c7b71dfc37fe36884c92e58c6b9da44a0050b957f1b3a634d0cb75cd5e801bd4b147c355c6378525e19d4a453a7674d9d048bd659968681f34019f436c4dd806186dcc16a5276dc1ada5b016549445aabab53702cd2ba8891f65201124cdeb445fd6786b1cd24225302ad255683ed86fbd724c1b526c8fadf9502c9acc1dd31706414931d045da3b2c5b5dfeb30c1c757d124306d0375211764eca3af6f4530b72c9140b191fabbb5bdf2f089591a43a8effa3571a2d5e8aa1c1c32c762c6358398617cc2c037063029ad5cc0ff71c5842682757e20dd75e15105c26ed3c8273126c2ec81e2932f27386fde387af29c53edeaea9e57b06ec4103d60634ea74c7197bb43ae3c11acce6ebee19ae72e251d5d6b3c9e8380371c2eb57930565cb78d20cfdf3eb235a12dc61b62c28ad6f9113b774f2b6becfcbf7522fc798a8a31911c214361279fa55c669429d8c51617b6363addcde666c3b0569833d6e4f3e6785d515708a622561d1c4e3e564fc786b7eea775cf90590643b8e3a9339b8af7a5e8bd364bca755d93d9884c7c2a7f66cb20bf9cd347f8037ed0d39e95687d5e661a68f835f1031c4d60fe4c5c2bb5e67378dcbd7bbe36e6f892753d57f2c8696ca2599d6f0e27b5636134c11cfc34ee12f343d8378e8d734fc09fc4881b046ade3f4a35888587eaa49bfd7a75146b24d2d91aa7692b52ffb7038c977c4155370f2172b3d4a69aa5485bc19d28c95258b71d327636ca996aa0b88a4656877032b96796b7eefcc2b4a3791688b1fbed74338c44f685cac11187eb2e6edf6545cd56cc37bb2f447daa7f8d6a7cda7fe3228cd1f5804e50a908475538f9053196250c237e405a67013e11359f1c81a18b4deabd27bd980948e3bfef6f12e8848097526da57413b9536e3dab23c36fb50ce00f022574c19d588790de2c662a929ded5d356bb68388acf78362c45af2af05e6871f3c110a1f6e0f45837315eefdb8ee06a6cdd1551bade46c2a432bccf70b4cf84c147baf60fdae0df710c4286ca20d2e34ae9192271d8aab4eab6fbb319ddb5e9b210c04aa9d8a6bfcceb7371e70997f52e29840e2d260d854eeae9b8583348e8d9374b6c499a49bef8fccd22fb7c018dc93b2260425a266e0146809137d1f6f0c87b5b69aee32c672cd237039dff66cfcb204fe8997ea466099fa9801bfb9fbafb2f5b7c89c6f70e4693cb7eeb33c2bd821eac0e89268fb5807d8d094017f541b2eeb3787de07ab99c88c942cc2bb663954eb2b9374cf45d8760e158b8b480970e9b7c2443572cd8c91e9d06fef09ba73dc70631d6e6913f6a624cc4438bd837b85aa6c5b547809020de6b6764a9e964a952d67387ddeb22</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建总结</title>
      <link href="/2020/01/23/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/"/>
      <url>/2020/01/23/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h2 id="起始"><a href="#起始" class="headerlink" title="起始"></a>起始</h2><p>其实很早就有做一个自己的博客的想法，但那时以为只有写一个java web项目，搭配服务器才能搞出来，这就无法实施了。但这个寒假开始偶然看到一个<a href="https://szyink.com/" target="_blank" rel="noopener">typecho博客</a>，一下子就被它的主题吸引了，第一印象是真的好看，清新文艺、简洁大方，瞬间有了搭建自己博客的冲动。 然后就开始了解个人博客的搭建，由于typecho、wordpress都得有自己的服务器才能让别人访问，于是出于第一次的尝试心态，选择了hexo+GitHub pages搭建，尝鲜的同时还是能让别人访问的。再申请个域名，不用备案也能让博客显得有格调。。</p><h2 id="主题的选择"><a href="#主题的选择" class="headerlink" title="主题的选择"></a>主题的选择</h2><p>hexo还是比较完善成熟的，有很多繁琐的细节，对应的插件主题有很多，这就让有选择困难症的我伤透了脑筋。其实开始是以第一次被吸引的那个typecho博客用的handsome主题为选择标准的，但后来发现handsome作为付费主题，在hexo中少有相对应的主题可与之媲美，且其平台也是限制了主题功能。但我实在是不想用默认的或者“经典皮肤”next了，最后还是求助偶尔万能的知乎，找到了一款满意的主题——butterfly。这款主题也是比较美观，功能完善，文档也还行的（这个我就要吐槽了，它原来的文档网站挂掉了，应该是被恶意劫持了，反正就找不到文档了，但最后还是直接用搜索引擎找到了文档）。</p><h2 id="配置过程中遇到的问题"><a href="#配置过程中遇到的问题" class="headerlink" title="配置过程中遇到的问题"></a>配置过程中遇到的问题</h2><p>哇，最开始时对这些_config.yml、markdown什么的真一窍不通啊啊。什么都看不懂，找半天找不到地方，好在连续两天折腾大概对各个配置熟悉起来，插件的应用也得心应手，也慢慢能用markdown写博客了。</p><h3 id="在此过程中大大小小的问题有："><a href="#在此过程中大大小小的问题有：" class="headerlink" title="在此过程中大大小小的问题有："></a>在此过程中大大小小的问题有：</h3><h4 id="aplayer"><a href="#aplayer" class="headerlink" title="aplayer"></a>aplayer</h4><p>播放音乐在导航栏的音乐界面中一开始失灵无法使用，后来发现是带着以前的网页格式粘贴导致。</p><h4 id="豆瓣插件"><a href="#豆瓣插件" class="headerlink" title="豆瓣插件"></a>豆瓣插件</h4><p>使用豆瓣插件获取豆瓣账号书籍、电影等信息，由于在测试过程中，获取次数太多，被豆瓣屏蔽😓无法获取，过了一天又可以。</p><h4 id="markdown中图片插入问题。"><a href="#markdown中图片插入问题。" class="headerlink" title="markdown中图片插入问题。"></a>markdown中图片插入问题。</h4><p>路径的选择总是有问题，绝对不能天绝对路径(lll￢ω￢)这是铁律……换个环境路径立马失效。然后直接用相对路径在hexo post中大部分情况会失灵，这需要再下载<a href="https://www.jianshu.com/p/3db6a61d3782" target="_blank" rel="noopener">hexo-asset-image</a>，它会新建一个与md同名文件夹，里面存图片可访问。</p><h4 id="文件的存储"><a href="#文件的存储" class="headerlink" title="文件的存储"></a>文件的存储</h4><p>这个问题我可能将持续面对。目前用的是<a href="https://leancloud.cn" target="_blank" rel="noopener">leancloud</a>新建应用上传文件，获取链接，在在博文中插入。但这个服务肯定不能长期免费提供，还得有备案域名绑定，这就很头疼。可能到时候得再找一个类似的云存储替代。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前，博客的大部分功能都已完成，剩下的就是看自己能用多少热情坚持写下去了……</p></body></html>]]></content>
      
      
      <categories>
          
          <category> summary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题总结 </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于typecho</title>
      <link href="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/"/>
      <url>/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="关于typecho的尝试"><a href="#关于typecho的尝试" class="headerlink" title="关于typecho的尝试"></a>关于typecho的尝试</h1><h2 id="走了很多弯路"><a href="#走了很多弯路" class="headerlink" title="走了很多弯路"></a>走了很多弯路</h2><p>​    有一说一，typecho是真的好用，这得吹一波。它有自己的后台，功能完善，对主题、插件的管理直接且方便，真的是很良心。而就是这些，让我以为一定只能需要服务器才能运行，当然这也确实是需要服务器来进行复杂的操作，静态网页肯定做不到这些。但我错得离谱的是以为本地不能搭建typecho环境，必须得Linux服务器，搞得我有去下了个CentOS虚拟机捣鼓半天。我现在的话只是想现在本地看一下typecho的具体情况，服务器什么的以后再说，但是弄半天本地就是不行。</p><p>   后来我越想越不对劲，不对啊，这东西按道理有个php全家桶像xampp什么的应该都能运行啊，不管是Windows还是Linux。后来在phpstudy里面安装，发现的确是能进入安装页面中的😓，属实自己捞了，学了这么计网实验都是干啥吃的……话说到这里，我突然想起来微机实验的成绩应该出来了！</p><p>   我去看一下先，。。。完了，B+。。最差的一个实验成绩。不过也确实，这里面没有一个是我自己好好做的，怪不了谁，当初要态度端正点，好好学一下就好。咳、话扯远了。</p><p><a href="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz1.png" data-fancybox="group" data-caption="phpstudy" class="fancybox"><img alt="phpstudy" title="phpstudy" data-src="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz1.png" class="lazyload"></a></p><h2 id="使用phpStudy在Windows本地搭建"><a href="#使用phpStudy在Windows本地搭建" class="headerlink" title="使用phpStudy在Windows本地搭建"></a>使用phpStudy在Windows本地搭建</h2><p>   最后phpstudy里安装时，发现总连不上数据库。我寻思端口什么的各项配置应该都没问题啊，说到mysql，我现在系统同时有三个MySQL运行，5.1、5.7、8.0都可以正常运行，这也是在端口、服务、注册表各种配置间来回改才能行的。最后一查原因是得先在MySQL里建typecho表(lll￢ω￢)，又愚蠢了，好多低级错误让自己忙活半天，我以为它会自动帮着建来着。。接下来就完全跟着界面提示走进行了。</p><p><a href="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz2.png" data-fancybox="group" data-caption="typecho1" class="fancybox"><img alt="typecho1" title="typecho1" data-src="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz2.png" class="lazyload"></a></p><p><a href="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz3.png" data-fancybox="group" data-caption="typecho2" class="fancybox"><img alt="typecho2" title="typecho2" data-src="/2020/01/23/%E5%85%B3%E4%BA%8Etypecho/pz3.png" class="lazyload"></a></p><p>   反正，不管怎么说，还是能在Windows系统中成功搭建本地typecho，在网上找一个合适的主题试用一下，越用越觉得这东西真棒，比hexo肯定是功能强大多了，当然我也是很喜欢hexo，毕竟作为入门级博客，还可以搭配GitHub、新手域名让人白嫖已经很不错了。</p></body></html>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typecho </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密测试</title>
      <link href="/2020/01/19/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/01/19/%E5%8A%A0%E5%AF%86%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f8e4cb59f532e86f0b568021aa40742c7ba93550301bbd3099dd6d8c19d6ae53">1361495f87fcfdf0bb0aaa8d1c0d999a36e2ab59107d2c8a76548b8a3f8c177c18d64acc9a2122adfc6b367ce65581587755d52f2749cadf3a8388e2b8a557c1f034f6ab4f17ddfd6ccf68a61edff2deaf756998aabd5e0dfa0bf39af646b32b5261ccf1f1d2a61165b0ac41b62c903a21075529cc7b8cc9fc82a46cb178589bf2abf18bd90e7cde6dfb4ddb07710b7f734e0b5cb6f520366a564e8946503da4ae3f4283373032204bafb65e6e6e5abe7ce7888c1e073ff2d957d07fb627e096ad8cc1fcd976bd0b1776d57d500a9d1d82760097b049a400bd90bd865af51552d65af6290d4d1ff8968865e9b150cdc84c64ea5141740d3522884aa3cda9a40c34d4e5430c6e1b9e22ee072c42fd5b31c7879947e66df7c27f3c1e61583a29edd965f183f9482d24b8944f19c1030c90565497f3c4c130689a1e0451ceff4c75bccf8f7890d1b0689189ec9e1b2d80a928647ffef03eaa0aeff0b0d5b3eda07a0d6e17324cc1d8a8e284daea893e78c64e9cd3307fb72f25f487d2a2b636e0ddf3f50d8d06ff0119987c8db250afce68a6d22b229f6a5cf192a3b0f7b6e278246cdfd55bd4dace35a6cee3cf604a40a88f56caaea82d9fb555fc16ebef56eb16385f99cb40fa96cc74dc810e0c3aa133613b7f784ede3c84d1ea6f120a323876068a9fca2d4c523d52c7fc11a8a4763c140224f326624b58a230d7a03cdce535</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只出现一次的数字</title>
      <link href="/2020/01/18/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>/2020/01/18/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a><strong>说明：</strong></h2><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a><strong>示例 1:</strong></h4><p><code>输入: [2,2,1]</code> </p><p><code>输出: 1</code></p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a><strong>示例 2:</strong></h4><p><code>输入: [4,1,2,1,2]</code> </p><p><code>输出: 4</code></p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>这道题真的妙，我越发觉得自己不适合算法什么的了😑</p><p>最精彩的解法是用异或运算</p><p>先设一个变量、初始值为0，将其与数组中的每个数异或，每次赋值为得到的新值。由于第一个数与0异或，还是其自己，在与后面的异或相同则是0，不同则还是自己，所以最后得到的数只有出现过一次的数。</p><p><code>class Solution {</code></p><p>​    <code>public int singleNumber(int[] nums) {</code></p><p>​        <code>int once = 0;</code></p><p>​        <code>for(int i = 0; i < nums.length; i++){</code></p><p>​            <code>once = once ^ nums[i];</code></p><p>​        <code>}</code></p><p>​        <code>return once ;</code></p><p>​        <code>}</code></p><p>​    <code>}</code></p></body></html>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 巧妙的算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ vector容器</title>
      <link href="/2020/01/17/C++%20vector%20%E5%AE%B9%E5%99%A8/"/>
      <url>/2020/01/17/C++%20vector%20%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><h1 id="C-vector-容器"><a href="#C-vector-容器" class="headerlink" title="C++ vector 容器"></a><strong>C++ vector 容器</strong></h1><p>向量（Vector）是一个封装了动态大小数组的顺序容器（Sequence Container）。跟任意其它类型容器一样，它能够存放各种类型的对象。可以简单的认为，向量是一个能够存放任意类型的动态数组。</p><h3 id="特性："><a href="#特性：" class="headerlink" title="特性："></a><strong>特性：</strong></h3><p><strong>1.顺序序列</strong></p><p>顺序容器中的元素按照严格的线性顺序排序。可以通过元素在序列中的位置访问对应的元素。</p><p><strong>2.动态数组</strong></p><p>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。操供了在序列末尾相对快速地添加/删除元素的操作。</p><p><strong>3.能够感知内存分配器的（Allocator-aware）</strong></p><p>容器使用一个内存分配器对象来动态地处理它的存储需求。</p><h3 id="基本函数实现："><a href="#基本函数实现：" class="headerlink" title="基本函数实现："></a><strong>基本函数实现：</strong></h3><p><code>1.push_back 在数组的最后添加一个数据</code></p><p><code>2.pop_back 去掉数组的最后一个数据</code></p><p><code>3.at 得到编号位置的数据</code></p><p><code>4.begin 得到数组头的指针</code></p><p><code>5.end 得到数组的最后一个单元+1的指针</code></p><p><code>6．front 得到数组头的引用</code></p><p><code>7.back 得到数组的最后一个单元的引用</code></p><p><code>8.max_size 得到vector最大可以是多大</code></p><p><code>9.capacity 当前vector分配的大小</code></p><p><code>10.size 当前使用数据的大小</code></p><p><code>11.resize 改变当前使用数据的大小，如果它比当前使用的大，者填充默认值</code></p><p><code>12.reserve 改变当前vecotr所分配空间的大小</code></p><p><code>13.erase 删除指针指向的数据项</code></p><p><code>14.clear 清空当前的vector</code></p><p><code>15.rbegin 将vector反转后的开始指针返回(其实就是原来的end-1)</code></p><p><code>16.rend 将vector反转构的结束指针返回(其实就是原来的begin-1)</code></p><p><code>17.empty 判断vector是否为空</code></p><p><code>18.swap 与另一个vector交换数据</code></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h3><p>vector容器是一个模板类，可以存放任何类型的对象（但必须是同一类对象）。vector对象可以在运行时高效地添加元素，并且vector中元素是连续存储的。#include <vector>头文件。</vector></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>Ø vector和string一样，长度、下标等类型是size_type，但是vector获取size_type时，需要指定类型，如vector<int>::size_type这样的方式</int></p><p>Ø vector的下标操作，例如v[i]，只能用于操作已经存在的元素，可以进行覆盖、获取等，但是不能通过v[i++]这种方式来给一个vector容器添加元素，该功能需要用push_back操作完成，下标不具备该功能</p><p>Ø C++程序员习惯优先使用！=而不是<来编写循环判断条件</p></body></html>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> vecot&lt;&gt; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/01/16/test/"/>
      <url>/2020/01/16/test/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>这是一个测试文章</p><p>test</p>        <div id="aplayer-aoXntwcb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-aoXntwcb"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "rainbow",              author: "GFRIEND",              url: "http://lc-UQ294L34.cn-n1.lcfile.com/308b986e7a1533e7329a/rainbow.mp3",              pic: "http://lc-UQ294L34.cn-n1.lcfile.com/c864c24ec3570caff28f/GFRIEND.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script></body></html>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/15/hello-world/"/>
      <url>/2020/01/15/hello-world/</url>
      
        <content type="html"><![CDATA[<html><head><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p></body></html>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
